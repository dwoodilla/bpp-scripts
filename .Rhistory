rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
API_KEY = "6XB3KQVJ62BKQR3DVKX1MMGR"
QUANTAQ_DPW_SN = "MOD-00811"
datelist = seq(from=as.Date("2025-05-01"), to=as.Date("2025-05-31"), by="day")
QuantAQ_DPW_list = list(length=length(datelist))
for (i in seq_along(datelist)) {
res = resp_body_json(request(paste0("https://api.quant-aq.com/v1/devices/", QUANTAQ_DPW_SN, "/data-by-date/", datelist[i])) %>%
req_auth_basic(API_KEY, "") %>%
req_perform()
)
QuantAQ_DPW_list[i] = as.data.frame(res$data)
}
QuantAQ_DPW = do.call(rbind, QuantAQ_DPW_list)
warnings()
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
API_KEY = "6XB3KQVJ62BKQR3DVKX1MMGR"
QUANTAQ_DPW_SN = "MOD-00811"
setup_client(api_key = API_KEY)
# Get all data from QuantAQ sensor at DPW for the month of May with 1-hour resolution
# Apparently the R API has no method to get resampled data (needed for 1h resolution), so this must be done manually using CLI + httr2
# Make an HTTP request using httr2, following HTTP API specifications.
# QuantAQ_DPW = request("https://api.quant-aq.com/v1/data/resampled") %>% # This is the URL which provides resampled data
#   req_auth_basic(API_KEY, "") %>% #Authenticate the request w/ API_KEY (no password so second arg is blank)
#   req_url_query(
#     sn = "MOD-00811", # Serial number of QuantAQ Node at DPW site
#     start_date = "2025-05-01",
#     end_date = "2025-05-31",
#     start_time = "00:00:00+00:00",
#     end_time = "00:00:00+00:00",
#     period = "1h" #Specify 1-hour resolution
#   ) %>%
#   req_perform() # Actually make the HTTP request
# get_data(QUANTAQ_DPW_SN, limit=NULL, start="2025-05-01", stop="2025-05-31", filter=NULL, sort=NULL, raw=TRUE)
datelist = seq(from=as.Date("2025-05-01"), to=as.Date("2025-05-31"), by="day")
QuantAQ_DPW_list <- vector("list", length(datelist))
for (i in seq_along(datelist)) {
res <- request(paste0("https://api.quant-aq.com/v1/devices/", QUANTAQ_DPW_SN, "/data-by-date/", datelist[i])) %>%
req_auth_basic(API_KEY, "") %>%
req_perform() %>%
resp_body_json()
if (!is.null(res$data) && length(res$data) > 0) {
QuantAQ_DPW_list[[i]] <- as.data.frame(res$data)
} else {
message("No data on ", datelist[i])
QuantAQ_DPW_list[[i]] <- NULL
}
}
QuantAQ_DPW_list <- QuantAQ_DPW_list[!sapply(QuantAQ_DPW_list, is.null)]
QuantAQ_DPW <- dplyr::bind_rows(QuantAQ_DPW_list)
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
API_KEY = "6XB3KQVJ62BKQR3DVKX1MMGR"
QUANTAQ_DPW_SN = "MOD-00811"
setup_client(api_key = API_KEY)
# Get all data from QuantAQ sensor at DPW for the month of May with 1-hour resolution
# Apparently the R API has no method to get resampled data (needed for 1h resolution), so this must be done manually using CLI + httr2
# Make an HTTP request using httr2, following HTTP API specifications.
# QuantAQ_DPW = request("https://api.quant-aq.com/v1/data/resampled") %>% # This is the URL which provides resampled data
#   req_auth_basic(API_KEY, "") %>% #Authenticate the request w/ API_KEY (no password so second arg is blank)
#   req_url_query(
#     sn = "MOD-00811", # Serial number of QuantAQ Node at DPW site
#     start_date = "2025-05-01",
#     end_date = "2025-05-31",
#     start_time = "00:00:00+00:00",
#     end_time = "00:00:00+00:00",
#     period = "1h" #Specify 1-hour resolution
#   ) %>%
#   req_perform() # Actually make the HTTP request
# get_data(QUANTAQ_DPW_SN, limit=NULL, start="2025-05-01", stop="2025-05-31", filter=NULL, sort=NULL, raw=TRUE)
datelist = seq(from=as.Date("2025-05-01"), to=as.Date("2025-05-31"), by="day")
QuantAQ_DPW_list <- vector("list", length(datelist))
for (i in seq_along(datelist)) {
res = get_data_by_date(QUANTAQ_DPW_SN, datelist[i], raw=TRUE)
}
View(res)
getwd()
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
files <- list.files(
path = "./BEACO2N_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
BEACO2N <- setNames(
lapply(files, read.csv),
tools::file_path_sans_ext(basename(files))
)
View(BEACO2N)
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
files <- list.files(
path = "./BEACO2N_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
BEACO2N <- setNames(
lapply(files, read.csv),
tools::file_path_sans_ext(basename(files))
)
View(BEACO2N)
View(BEACO2N)
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
measurement_files = list.files(
path = "./BEACO2N_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
BEACO2N = setNames(
lapply(measurement_files, read.csv),
tools::file_path_sans_ext(basename(measurement_files))
)
reference_files = list.files(
path = "./reference_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
reference = setNames(
lapply(reference_files, read.csv),
tools::file_path_sans_ext(basename(reference_files))
)
View(reference)
reference$q_dpw$period_start
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
# Create dataframes from CSV files in script directory
measurement_files = list.files(
path = "./BEACO2N_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
measurement = setNames(
lapply(measurement_files, read.csv),
tools::file_path_sans_ext(basename(measurement_files))
)
reference_files = list.files(
path = "./reference_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
reference = setNames(
lapply(reference_files, read.csv),
tools::file_path_sans_ext(basename(reference_files))
)
measurement = lapply(measurement, function(df) { # Apply this across all measurement locations.
colnames(df)[colnames(df)=="datetime"] = "timestamp" # rename "datetime" to "timestamp".
df$timestamp = as.POSIXct(df$timestamp, tz = "UTC") # store "timestamp" as a POSIXct.
df$timestamp = as.POSIXct(round(df$timestamp, "mins"), tz = "UTC") # round "timestamp" to nearest minute.
df %>% select(-(all_of("local_timestamp", "epoch", "node_file_id"))) # remove local_timestamp, epoch, and node_file_id fields.
suffixed_cols = grepl("_wrk_aux$", names(df))  # Identify cols with suffix "_wrk_aux"
df[suffixed_cols] = df[suffixed_cols] * 1000 # Convert measurements from V to mV.
names(df)[suffixed_cols] <- sub("_wrk_aux$", "", names(df)[suffixed_cols]) # Remove "_wrk_aux" suffix from col name.
return(df)
})
df
View(df)
rlang::last_trace()
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
# Create dataframes from CSV files in script directory
measurement_files = list.files(
path = "./BEACO2N_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
measurement = setNames(
lapply(measurement_files, read.csv),
tools::file_path_sans_ext(basename(measurement_files))
)
reference_files = list.files(
path = "./reference_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
reference = setNames(
lapply(reference_files, read.csv),
tools::file_path_sans_ext(basename(reference_files))
)
measurement = lapply(measurement, function(df) { # Apply this across all measurement locations.
colnames(df)[colnames(df)=="datetime"] = "timestamp" # rename "datetime" to "timestamp".
df$timestamp = as.POSIXct(df$timestamp, tz = "UTC") # store "timestamp" as a POSIXct.
df$timestamp = as.POSIXct(round(df$timestamp, "mins"), tz = "UTC") # round "timestamp" to nearest minute.
df %>% select(-(all_of("local_timestamp", "epoch", "node_file_id"))) # remove local_timestamp, epoch, and node_file_id fields.
suffixed_cols = grepl("_wrk_aux$", names(df))  # Identify cols with suffix "_wrk_aux"
df[suffixed_cols] = df[suffixed_cols] * 1000 # Convert measurements from V to mV.
names(df)[suffixed_cols] <- sub("_wrk_aux$", "", names(df)[suffixed_cols]) # Remove "_wrk_aux" suffix from col name.
return(df)
})
measurement
View(measurement)
View(measurement$ccri)
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
# Create dataframes from CSV files in script directory
measurement_files = list.files(
path = "./BEACO2N_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
measurement = setNames(
lapply(measurement_files, read.csv),
tools::file_path_sans_ext(basename(measurement_files))
)
reference_files = list.files(
path = "./reference_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
reference = setNames(
lapply(reference_files, read.csv),
tools::file_path_sans_ext(basename(reference_files))
)
measurement = lapply(measurement, function(df) { # Apply this across all measurement locations.
colnames(df)[colnames(df)=="datetime"] = "timestamp" # rename "datetime" to "timestamp".
df$timestamp = as.POSIXct(df$timestamp, tz = "UTC") # store "timestamp" as a POSIXct.
df$timestamp = as.POSIXct(round(df$timestamp, "mins"), tz = "UTC") # round "timestamp" to nearest minute.
df %>% select(-(any_of("local_timestamp", "epoch", "node_file_id"))) # remove local_timestamp, epoch, and node_file_id fields.
suffixed_cols = grepl("_wrk_aux$", names(df))  # Identify cols with suffix "_wrk_aux"
df[suffixed_cols] = df[suffixed_cols] * 1000 # Convert measurements from V to mV.
names(df)[suffixed_cols] <- sub("_wrk_aux$", "", names(df)[suffixed_cols]) # Remove "_wrk_aux" suffix from col name.
return(df)
})
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
# Create dataframes from CSV files in script directory
measurement_files = list.files(
path = "./BEACO2N_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
measurement = setNames(
lapply(measurement_files, read.csv),
tools::file_path_sans_ext(basename(measurement_files))
)
reference_files = list.files(
path = "./reference_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
reference = setNames(
lapply(reference_files, read.csv),
tools::file_path_sans_ext(basename(reference_files))
)
measurement = lapply(measurement, function(df) { # Apply this across all measurement locations.
colnames(df)[colnames(df)=="datetime"] = "timestamp" # rename "datetime" to "timestamp".
df$timestamp = as.POSIXct(df$timestamp, tz = "UTC") # store "timestamp" as a POSIXct.
df$timestamp = as.POSIXct(round(df$timestamp, "mins"), tz = "UTC") # round "timestamp" to nearest minute.
df %>% select(-(all_of(c("local_timestamp", "epoch", "node_file_id")))) # remove local_timestamp, epoch, and node_file_id fields.
suffixed_cols = grepl("_wrk_aux$", names(df))  # Identify cols with suffix "_wrk_aux"
df[suffixed_cols] = df[suffixed_cols] * 1000 # Convert measurements from V to mV.
names(df)[suffixed_cols] <- sub("_wrk_aux$", "", names(df)[suffixed_cols]) # Remove "_wrk_aux" suffix from col name.
return(df)
})
View(measurement)
View(measurement[["ccri"]])
# **See ReadMe for QuantAQ's R API here: https://github.com/quant-aq/r-quantaq/blob/main/README.md**
# See docs for QuantAQ's HTTP API here: https://docs.quant-aq.com/software-apis-and-libraries/quantaq-cloud-api
rm(list=ls()) # clear the R environment between script runs
library(jsonlite)
# install.packages("devtools") # uncomment to install devtools package, needed to install R API
# devtools::install_github(repo="quant-aq/r-quantaq") # Uncomment to install QuantAQ's R API from GitHub.
# install.packages("httr2") # uncomment to install httr2, needed to use QuantAQ's HTTP API.
library(QuantAQAPIClient)
library(httr2)
library(clock)
library(dplyr)
# Create dataframes from CSV files in script directory
measurement_files = list.files(
path = "./BEACO2N_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
measurement = setNames(
lapply(measurement_files, read.csv),
tools::file_path_sans_ext(basename(measurement_files))
)
reference_files = list.files(
path = "./reference_measurements",
pattern = "\\.csv$",
full.names = TRUE
)
reference = setNames(
lapply(reference_files, read.csv),
tools::file_path_sans_ext(basename(reference_files))
)
measurement = lapply(measurement, function(df) { # Apply this across all measurement locations.
colnames(df)[colnames(df)=="datetime"] = "timestamp" # rename "datetime" to "timestamp".
df$timestamp = as.POSIXct(df$timestamp, tz = "UTC") # store "timestamp" as a POSIXct.
df$timestamp = as.POSIXct(round(df$timestamp, "mins"), tz = "UTC") # round "timestamp" to nearest minute.
df = df %>% select(-(all_of(c("local_timestamp", "epoch", "node_file_id")))) # remove local_timestamp, epoch, and node_file_id fields.
suffixed_cols = grepl("_wrk_aux$", names(df))  # Identify cols with suffix "_wrk_aux"
df[suffixed_cols] = df[suffixed_cols] * 1000 # Convert measurements from V to mV.
names(df)[suffixed_cols] <- sub("_wrk_aux$", "", names(df)[suffixed_cols]) # Remove "_wrk_aux" suffix from col name.
return(df)
})
View(measurement)
View(measurement[["ccri"]])
rm(list=ls()) # clear the R environment between script runs
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
traceback()
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(measurement)
View(reference)
View(reference[["q_dpw"]])
View(measurement)
View(measurement[["myron"]])
View(reference[["q_pema"]])
View(reference[["q_pema"]])
print(reference[["q_pema"]])
head(reference$q_pema)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(measurement[["dpw"]])
View(reference)
View(reference[["q_pema"]])
View(reference[["q_dpw"]])
View(reference[["q_pha"]])
View(measurement)
View(measurement[["library"]])
head(reference$q_pema)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(reference)
View(reference[["q_dpw"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(reference)
View(reference[["q_dpw"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(reference)
View(reference[["q_pema"]])
View(measurement)
View(measurement[["pema"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
rlang::last_trace()
traceback()
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(measurement)
View(reference)
View(measurement[["dpw"]])
View(reference[["q_dpw"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(reference[["q_pema"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(reference)
View(reference[["q_pema"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(reference)
View(reference[["q_pema"]])
View(measurement)
View(reference)
View(measurement[["dpw"]])
View(reference[["q_dpw"]])
merged = lapply(reference, merge(measurement, by = "timestamp", suffixes = c("_meas", "_ref")))
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
traceback()
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(merged)
View(merged[["dpw"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(merged)
View(merged[["dpw"]])
View(measurement)
View(measurement[["dpw"]])
View(reference)
View(reference[["q_dpw"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(merged)
View(merged[["dpw"]])
merged = merged %>% drop_na()
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(merged)
View(merged[["dpw"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(ref_co)
View(reference)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(reference[["pema"]])
View(measurement)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(ref_dfs)
View(ref_dfs[[3]])
View(ref_wide)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(co_by_time_location)
View(reference)
View(merged)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(co_by_time_location)
co_by_time_location %>% drop_na()
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(co_by_time_location)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(timestamps_10pc_rsd)
is.vector(timestamps_10pc_rsd)
is.data.frame(timestamps_10pc_rsd)
is.data.frame(timestamps_10pc_rsd$timestamp)
is.vector(timestamps_10pc_rsd$timestamp)
is.vector(timestamps_10pc_rsd[["timestamp"]])
as.vector(timestamps_10pc_rsd$timestamp)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(merged)
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
View(merged)
View(merged[["dpw"]])
source("~/Desktop/summer25/bpp-scripts/api-test-script.R", echo = TRUE)
